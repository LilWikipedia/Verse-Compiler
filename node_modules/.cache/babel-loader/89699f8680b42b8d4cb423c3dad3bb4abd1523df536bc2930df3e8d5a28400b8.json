{"ast":null,"code":"export class VerseInterpreter {\n  constructor() {\n    this.output = '';\n    this.symbolTable = new Map();\n  }\n  interpret(ast) {\n    this.output = '';\n    console.log('Interpreter received AST:', JSON.stringify(ast, null, 2));\n    if (!ast || typeof ast !== 'object' || !Array.isArray(ast.body)) {\n      throw new Error('Invalid AST structure: Expected an object with a body array');\n    }\n    this.visitProgram(ast);\n    return this.output;\n  }\n  visitProgram(program) {\n    for (const statement of program.body) {\n      this.visitStatement(statement);\n    }\n  }\n  visitStatement(statement) {\n    if (!statement || typeof statement !== 'object' || !statement.type) {\n      throw new Error(`Invalid statement: ${JSON.stringify(statement)}`);\n    }\n    console.log('Visiting statement:', statement);\n    switch (statement.type) {\n      case 'VariableDeclaration':\n        this.visitVariableDeclaration(statement);\n        break;\n      case 'SetStatement':\n        this.visitSetStatement(statement);\n        break;\n      case 'PrintStatement':\n        this.visitPrintStatement(statement);\n        break;\n      default:\n        throw new Error(`Unsupported statement type: ${statement.type}`);\n    }\n  }\n  visitVariableDeclaration(declaration) {\n    const value = this.evaluateExpression(declaration.value);\n    this.symbolTable.set(declaration.name.name, {\n      type: declaration.varType.name,\n      value\n    });\n  }\n  visitSetStatement(setStatement) {\n    const value = this.evaluateExpression(setStatement.value);\n    if (!this.symbolTable.has(setStatement.name.name)) {\n      throw new Error(`Cannot set undefined variable: ${setStatement.name.name}`);\n    }\n    const variable = this.symbolTable.get(setStatement.name.name);\n    variable.value = value;\n  }\n  visitPrintStatement(printStatement) {\n    const value = this.evaluateInterpolatedString(printStatement.value);\n    this.output += value + '\\n';\n  }\n  evaluateInterpolatedString(interpolatedString) {\n    return interpolatedString.parts.map(part => {\n      if (part.type === 'TextPart') {\n        return part.text;\n      } else if (part.type === 'InterpolatedExpression') {\n        return String(this.evaluateExpression(part.expression));\n      }\n    }).join('');\n  }\n  evaluateExpression(expression) {\n    console.log('Evaluating expression:', expression);\n    switch (expression.type) {\n      case 'StringLiteral':\n        return expression.value;\n      case 'IntegerLiteral':\n        return parseInt(expression.value, 10);\n      case 'FloatLiteral':\n        return parseFloat(expression.value);\n      case 'Identifier':\n        if (this.symbolTable.has(expression.name)) {\n          return this.symbolTable.get(expression.name).value;\n        }\n        throw new Error(`Undefined variable: ${expression.name}`);\n      default:\n        throw new Error(`Unsupported expression type: ${expression.type}`);\n    }\n  }\n}","map":{"version":3,"names":["VerseInterpreter","constructor","output","symbolTable","Map","interpret","ast","console","log","JSON","stringify","Array","isArray","body","Error","visitProgram","program","statement","visitStatement","type","visitVariableDeclaration","visitSetStatement","visitPrintStatement","declaration","value","evaluateExpression","set","name","varType","setStatement","has","variable","get","printStatement","evaluateInterpolatedString","interpolatedString","parts","map","part","text","String","expression","join","parseInt","parseFloat"],"sources":["/Users/johanfortus/Documents/Projects/Verse Playground/src/verse-interpreter.js"],"sourcesContent":["export class VerseInterpreter {\n    constructor() {\n      this.output = '';\n      this.symbolTable = new Map();\n    }\n  \n    interpret(ast) {\n      this.output = '';\n      console.log('Interpreter received AST:', JSON.stringify(ast, null, 2));\n      \n      if (!ast || typeof ast !== 'object' || !Array.isArray(ast.body)) {\n        throw new Error('Invalid AST structure: Expected an object with a body array');\n      }\n      \n      this.visitProgram(ast);\n      return this.output;\n    }\n  \n    visitProgram(program) {\n      for (const statement of program.body) {\n        this.visitStatement(statement);\n      }\n    }\n  \n    visitStatement(statement) {\n      if (!statement || typeof statement !== 'object' || !statement.type) {\n        throw new Error(`Invalid statement: ${JSON.stringify(statement)}`);\n      }\n  \n      console.log('Visiting statement:', statement);\n      switch (statement.type) {\n        case 'VariableDeclaration':\n          this.visitVariableDeclaration(statement);\n          break;\n        case 'SetStatement':\n          this.visitSetStatement(statement);\n          break;\n        case 'PrintStatement':\n          this.visitPrintStatement(statement);\n          break;\n        default:\n          throw new Error(`Unsupported statement type: ${statement.type}`);\n      }\n    }\n  \n    visitVariableDeclaration(declaration) {\n      const value = this.evaluateExpression(declaration.value);\n      this.symbolTable.set(declaration.name.name, { type: declaration.varType.name, value });\n    }\n  \n    visitSetStatement(setStatement) {\n      const value = this.evaluateExpression(setStatement.value);\n      if (!this.symbolTable.has(setStatement.name.name)) {\n        throw new Error(`Cannot set undefined variable: ${setStatement.name.name}`);\n      }\n      const variable = this.symbolTable.get(setStatement.name.name);\n      variable.value = value;\n    }\n  \n    visitPrintStatement(printStatement) {\n      const value = this.evaluateInterpolatedString(printStatement.value);\n      this.output += value + '\\n';\n    }\n  \n    evaluateInterpolatedString(interpolatedString) {\n      return interpolatedString.parts.map(part => {\n        if (part.type === 'TextPart') {\n          return part.text;\n        } else if (part.type === 'InterpolatedExpression') {\n          return String(this.evaluateExpression(part.expression));\n        }\n      }).join('');\n    }\n  \n    evaluateExpression(expression) {\n      console.log('Evaluating expression:', expression);\n      switch (expression.type) {\n        case 'StringLiteral':\n          return expression.value;\n        case 'IntegerLiteral':\n          return parseInt(expression.value, 10);\n        case 'FloatLiteral':\n          return parseFloat(expression.value);\n        case 'Identifier':\n          if (this.symbolTable.has(expression.name)) {\n            return this.symbolTable.get(expression.name).value;\n          }\n          throw new Error(`Undefined variable: ${expression.name}`);\n        default:\n          throw new Error(`Unsupported expression type: ${expression.type}`);\n      }\n    }\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}