{"ast":null,"code":"class VerseInterpreter {\n  constructor() {\n    this.output = '';\n  }\n  interpret(ast) {\n    this.output = '';\n    this.executeProgram(ast);\n    return this.output;\n  }\n  executeProgram(program) {\n    for (const statement of program.body) {\n      this.executeStatement(statement);\n    }\n  }\n  executeStatement(statement) {\n    switch (statement.type) {\n      case 'PrintStatement':\n        this.executePrintStatement(statement);\n        break;\n      // Add other statement types as needed\n      default:\n        throw new Error(`Unsupported statement type: ${statement.type}`);\n    }\n  }\n  executePrintStatement(printStatement) {\n    const value = this.evaluateExpression(printStatement.value);\n    this.output += value + '\\n';\n  }\n  evaluateExpression(expression) {\n    switch (expression.type) {\n      case 'StringLiteral':\n        return expression.value;\n      case 'NumberLiteral':\n        return expression.value;\n      case 'BooleanLiteral':\n        return expression.value;\n      // Add other expression types as needed\n      default:\n        throw new Error(`Unsupported expression type: ${expression.type}`);\n    }\n  }\n}\nexport const verseInterpreter = new VerseInterpreter();","map":{"version":3,"names":["VerseInterpreter","constructor","output","interpret","ast","executeProgram","program","statement","body","executeStatement","type","executePrintStatement","Error","printStatement","value","evaluateExpression","expression","verseInterpreter"],"sources":["/Users/johanfortus/Documents/Projects/Verse Playground/src/verse-interpreter.js"],"sourcesContent":["class VerseInterpreter {\n    constructor() {\n      this.output = '';\n    }\n  \n    interpret(ast) {\n      this.output = '';\n      this.executeProgram(ast);\n      return this.output;\n    }\n  \n    executeProgram(program) {\n      for (const statement of program.body) {\n        this.executeStatement(statement);\n      }\n    }\n  \n    executeStatement(statement) {\n      switch (statement.type) {\n        case 'PrintStatement':\n          this.executePrintStatement(statement);\n          break;\n        // Add other statement types as needed\n        default:\n          throw new Error(`Unsupported statement type: ${statement.type}`);\n      }\n    }\n  \n    executePrintStatement(printStatement) {\n      const value = this.evaluateExpression(printStatement.value);\n      this.output += value + '\\n';\n    }\n  \n    evaluateExpression(expression) {\n      switch (expression.type) {\n        case 'StringLiteral':\n          return expression.value;\n        case 'NumberLiteral':\n          return expression.value;\n        case 'BooleanLiteral':\n          return expression.value;\n        // Add other expression types as needed\n        default:\n          throw new Error(`Unsupported expression type: ${expression.type}`);\n      }\n    }\n  }\n  \n  export const verseInterpreter = new VerseInterpreter();"],"mappings":"AAAA,MAAMA,gBAAgB,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAG,EAAE;EAClB;EAEAC,SAASA,CAACC,GAAG,EAAE;IACb,IAAI,CAACF,MAAM,GAAG,EAAE;IAChB,IAAI,CAACG,cAAc,CAACD,GAAG,CAAC;IACxB,OAAO,IAAI,CAACF,MAAM;EACpB;EAEAG,cAAcA,CAACC,OAAO,EAAE;IACtB,KAAK,MAAMC,SAAS,IAAID,OAAO,CAACE,IAAI,EAAE;MACpC,IAAI,CAACC,gBAAgB,CAACF,SAAS,CAAC;IAClC;EACF;EAEAE,gBAAgBA,CAACF,SAAS,EAAE;IAC1B,QAAQA,SAAS,CAACG,IAAI;MACpB,KAAK,gBAAgB;QACnB,IAAI,CAACC,qBAAqB,CAACJ,SAAS,CAAC;QACrC;MACF;MACA;QACE,MAAM,IAAIK,KAAK,CAAC,+BAA+BL,SAAS,CAACG,IAAI,EAAE,CAAC;IACpE;EACF;EAEAC,qBAAqBA,CAACE,cAAc,EAAE;IACpC,MAAMC,KAAK,GAAG,IAAI,CAACC,kBAAkB,CAACF,cAAc,CAACC,KAAK,CAAC;IAC3D,IAAI,CAACZ,MAAM,IAAIY,KAAK,GAAG,IAAI;EAC7B;EAEAC,kBAAkBA,CAACC,UAAU,EAAE;IAC7B,QAAQA,UAAU,CAACN,IAAI;MACrB,KAAK,eAAe;QAClB,OAAOM,UAAU,CAACF,KAAK;MACzB,KAAK,eAAe;QAClB,OAAOE,UAAU,CAACF,KAAK;MACzB,KAAK,gBAAgB;QACnB,OAAOE,UAAU,CAACF,KAAK;MACzB;MACA;QACE,MAAM,IAAIF,KAAK,CAAC,gCAAgCI,UAAU,CAACN,IAAI,EAAE,CAAC;IACtE;EACF;AACF;AAEA,OAAO,MAAMO,gBAAgB,GAAG,IAAIjB,gBAAgB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}