{"ast":null,"code":"// verse-interpreter.js\n\nexport class VerseInterpreter {\n  constructor() {\n    this.output = '';\n  }\n  interpret(ast) {\n    this.output = '';\n    this.visitProgram(ast);\n    return this.output;\n  }\n  visitProgram(program) {\n    for (const statement of program.body) {\n      this.visitStatement(statement);\n    }\n  }\n  visitStatement(statement) {\n    switch (statement.type) {\n      case 'PrintStatement':\n        this.visitPrintStatement(statement);\n        break;\n      default:\n        throw new Error(`Unsupported statement type: ${statement.type}`);\n    }\n  }\n  visitPrintStatement(printStatement) {\n    const value = this.evaluateExpression(printStatement.value);\n    this.output += value + '\\n';\n  }\n  evaluateExpression(expression) {\n    switch (expression.type) {\n      case 'StringLiteral':\n        return expression.value;\n      case 'NumberLiteral':\n        return expression.value.toString();\n      default:\n        throw new Error(`Unsupported expression type: ${expression.type}`);\n    }\n  }\n}","map":{"version":3,"names":["VerseInterpreter","constructor","output","interpret","ast","visitProgram","program","statement","body","visitStatement","type","visitPrintStatement","Error","printStatement","value","evaluateExpression","expression","toString"],"sources":["/Users/johanfortus/Documents/Projects/Verse Playground/src/verse-interpreter.js"],"sourcesContent":["// verse-interpreter.js\n\nexport class VerseInterpreter {\n    constructor() {\n      this.output = '';\n    }\n  \n    interpret(ast) {\n      this.output = '';\n      this.visitProgram(ast);\n      return this.output;\n    }\n  \n    visitProgram(program) {\n      for (const statement of program.body) {\n        this.visitStatement(statement);\n      }\n    }\n  \n    visitStatement(statement) {\n      switch (statement.type) {\n        case 'PrintStatement':\n          this.visitPrintStatement(statement);\n          break;\n        default:\n          throw new Error(`Unsupported statement type: ${statement.type}`);\n      }\n    }\n  \n    visitPrintStatement(printStatement) {\n      const value = this.evaluateExpression(printStatement.value);\n      this.output += value + '\\n';\n    }\n  \n    evaluateExpression(expression) {\n      switch (expression.type) {\n        case 'StringLiteral':\n          return expression.value;\n        case 'NumberLiteral':\n          return expression.value.toString();\n        default:\n          throw new Error(`Unsupported expression type: ${expression.type}`);\n      }\n    }\n  }"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,gBAAgB,CAAC;EAC1BC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAG,EAAE;EAClB;EAEAC,SAASA,CAACC,GAAG,EAAE;IACb,IAAI,CAACF,MAAM,GAAG,EAAE;IAChB,IAAI,CAACG,YAAY,CAACD,GAAG,CAAC;IACtB,OAAO,IAAI,CAACF,MAAM;EACpB;EAEAG,YAAYA,CAACC,OAAO,EAAE;IACpB,KAAK,MAAMC,SAAS,IAAID,OAAO,CAACE,IAAI,EAAE;MACpC,IAAI,CAACC,cAAc,CAACF,SAAS,CAAC;IAChC;EACF;EAEAE,cAAcA,CAACF,SAAS,EAAE;IACxB,QAAQA,SAAS,CAACG,IAAI;MACpB,KAAK,gBAAgB;QACnB,IAAI,CAACC,mBAAmB,CAACJ,SAAS,CAAC;QACnC;MACF;QACE,MAAM,IAAIK,KAAK,CAAC,+BAA+BL,SAAS,CAACG,IAAI,EAAE,CAAC;IACpE;EACF;EAEAC,mBAAmBA,CAACE,cAAc,EAAE;IAClC,MAAMC,KAAK,GAAG,IAAI,CAACC,kBAAkB,CAACF,cAAc,CAACC,KAAK,CAAC;IAC3D,IAAI,CAACZ,MAAM,IAAIY,KAAK,GAAG,IAAI;EAC7B;EAEAC,kBAAkBA,CAACC,UAAU,EAAE;IAC7B,QAAQA,UAAU,CAACN,IAAI;MACrB,KAAK,eAAe;QAClB,OAAOM,UAAU,CAACF,KAAK;MACzB,KAAK,eAAe;QAClB,OAAOE,UAAU,CAACF,KAAK,CAACG,QAAQ,CAAC,CAAC;MACpC;QACE,MAAM,IAAIL,KAAK,CAAC,gCAAgCI,UAAU,CAACN,IAAI,EAAE,CAAC;IACtE;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}