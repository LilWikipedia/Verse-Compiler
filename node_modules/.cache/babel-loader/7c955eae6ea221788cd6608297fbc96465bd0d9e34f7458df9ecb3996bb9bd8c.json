{"ast":null,"code":"export class VerseInterpreter {\n  constructor() {\n    this.output = '';\n    this.symbolTable = new Map();\n  }\n  interpret(ast) {\n    this.output = '';\n    console.log('Interpreter received AST:', JSON.stringify(ast, null, 2));\n    if (!ast || typeof ast !== 'object' || !Array.isArray(ast.body)) {\n      throw new Error('Invalid AST structure: Expected an object with a body array');\n    }\n    this.visitProgram(ast);\n    return this.output;\n  }\n  visitProgram(program) {\n    for (const statement of program.body) {\n      this.visitStatement(statement);\n    }\n  }\n  visitStatement(statement) {\n    console.log('Visiting statement:', JSON.stringify(statement, null, 2));\n    switch (statement.type) {\n      case 'VariableDeclaration':\n        this.visitVariableDeclaration(statement);\n        break;\n      case 'PrintStatement':\n        this.visitPrintStatement(statement);\n        break;\n      default:\n        throw new Error(`Unsupported statement type: ${statement.type}`);\n    }\n  }\n  visitVariableDeclaration(declaration) {\n    const value = this.evaluateExpression(declaration.value);\n    console.log(`Storing variable ${declaration.name.name} with type ${declaration.varType.name} and value ${value}`);\n    this.symbolTable.set(declaration.name.name, {\n      type: declaration.varType.name,\n      value\n    });\n  }\n  visitPrintStatement(printStatement) {\n    try {\n      const value = this.evaluateInterpolatedString(printStatement.value);\n      console.log('Evaluated Print Statement:', value);\n      this.output += value + '\\n';\n    } catch (error) {\n      console.error('Error in Print Statement:', error.message);\n      this.output += `Error: ${error.message}\\n`;\n    }\n  }\n  evaluateInterpolatedString(interpolatedString) {\n    return interpolatedString.parts.map(part => {\n      if (part.type === 'TextPart') {\n        return part.text;\n      } else if (part.type === 'InterpolatedExpression') {\n        try {\n          return String(this.evaluateExpression(part.expression));\n        } catch (error) {\n          return `<${error.message}>`;\n        }\n      }\n    }).join('');\n  }\n  evaluateExpression(expression) {\n    console.log('Evaluating expression:', JSON.stringify(expression, null, 2));\n    let result;\n    switch (expression.type) {\n      case 'StringLiteral':\n        result = expression.value;\n        break;\n      case 'IntegerLiteral':\n        result = expression.value;\n        break;\n      case 'FloatLiteral':\n        result = expression.value;\n        break;\n      case 'Identifier':\n        if (this.symbolTable.has(expression.name)) {\n          result = this.symbolTable.get(expression.name).value;\n        } else {\n          throw new Error(`Undefined variable: ${expression.name}`);\n        }\n        break;\n      default:\n        throw new Error(`Unsupported expression type: ${expression.type}`);\n    }\n    console.log(`Expression ${expression.type} evaluated to:`, result);\n    return result;\n  }\n}","map":{"version":3,"names":["VerseInterpreter","constructor","output","symbolTable","Map","interpret","ast","console","log","JSON","stringify","Array","isArray","body","Error","visitProgram","program","statement","visitStatement","type","visitVariableDeclaration","visitPrintStatement","declaration","value","evaluateExpression","name","varType","set","printStatement","evaluateInterpolatedString","error","message","interpolatedString","parts","map","part","text","String","expression","join","result","has","get"],"sources":["/Users/johanfortus/Documents/Projects/Verse Playground/src/verse-interpreter.js"],"sourcesContent":["export class VerseInterpreter {\n    constructor() {\n      this.output = '';\n      this.symbolTable = new Map();\n    }\n  \n    interpret(ast) {\n      this.output = '';\n      console.log('Interpreter received AST:', JSON.stringify(ast, null, 2));\n      \n      if (!ast || typeof ast !== 'object' || !Array.isArray(ast.body)) {\n        throw new Error('Invalid AST structure: Expected an object with a body array');\n      }\n      \n      this.visitProgram(ast);\n      return this.output;\n    }\n  \n    visitProgram(program) {\n      for (const statement of program.body) {\n        this.visitStatement(statement);\n      }\n    }\n  \n    visitStatement(statement) {\n      console.log('Visiting statement:', JSON.stringify(statement, null, 2));\n      switch (statement.type) {\n        case 'VariableDeclaration':\n          this.visitVariableDeclaration(statement);\n          break;\n        case 'PrintStatement':\n          this.visitPrintStatement(statement);\n          break;\n        default:\n          throw new Error(`Unsupported statement type: ${statement.type}`);\n      }\n    }\n  \n    visitVariableDeclaration(declaration) {\n      const value = this.evaluateExpression(declaration.value);\n      console.log(`Storing variable ${declaration.name.name} with type ${declaration.varType.name} and value ${value}`);\n      this.symbolTable.set(declaration.name.name, { type: declaration.varType.name, value });\n    }\n  \n    visitPrintStatement(printStatement) {\n      try {\n        const value = this.evaluateInterpolatedString(printStatement.value);\n        console.log('Evaluated Print Statement:', value);\n        this.output += value + '\\n';\n      } catch (error) {\n        console.error('Error in Print Statement:', error.message);\n        this.output += `Error: ${error.message}\\n`;\n      }\n    }\n  \n    evaluateInterpolatedString(interpolatedString) {\n      return interpolatedString.parts.map(part => {\n        if (part.type === 'TextPart') {\n          return part.text;\n        } else if (part.type === 'InterpolatedExpression') {\n          try {\n            return String(this.evaluateExpression(part.expression));\n          } catch (error) {\n            return `<${error.message}>`;\n          }\n        }\n      }).join('');\n    }\n  \n    evaluateExpression(expression) {\n      console.log('Evaluating expression:', JSON.stringify(expression, null, 2));\n      let result;\n      switch (expression.type) {\n        case 'StringLiteral':\n          result = expression.value;\n          break;\n        case 'IntegerLiteral':\n          result = expression.value;\n          break;\n        case 'FloatLiteral':\n          result = expression.value;\n          break;\n        case 'Identifier':\n          if (this.symbolTable.has(expression.name)) {\n            result = this.symbolTable.get(expression.name).value;\n          } else {\n            throw new Error(`Undefined variable: ${expression.name}`);\n          }\n          break;\n        default:\n          throw new Error(`Unsupported expression type: ${expression.type}`);\n      }\n      console.log(`Expression ${expression.type} evaluated to:`, result);\n      return result;\n    }\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}