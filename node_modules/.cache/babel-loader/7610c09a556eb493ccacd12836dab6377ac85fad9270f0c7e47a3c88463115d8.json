{"ast":null,"code":"export class VerseInterpreter {\n  constructor() {\n    this.output = '';\n    this.symbolTable = new Map();\n  }\n  interpret(ast) {\n    this.output = '';\n    console.log('Interpreter received AST:', JSON.stringify(ast, null, 2));\n    if (!ast || typeof ast !== 'object' || !Array.isArray(ast.body)) {\n      throw new Error('Invalid AST structure: Expected an object with a body array');\n    }\n    this.visitProgram(ast);\n    return this.output;\n  }\n  visitProgram(program) {\n    for (const statement of program.body) {\n      this.visitStatement(statement);\n    }\n  }\n  visitStatement(statement) {\n    if (!statement || typeof statement !== 'object' || !statement.type) {\n      throw new Error(`Invalid statement: ${JSON.stringify(statement)}`);\n    }\n    console.log('Visiting statement:', statement);\n    switch (statement.type) {\n      case 'VariableDeclaration':\n        this.visitVariableDeclaration(statement);\n        break;\n      case 'PrintStatement':\n        this.visitPrintStatement(statement);\n        break;\n      case 'ExpressionStatement':\n        this.visitExpressionStatement(statement);\n        break;\n      default:\n        throw new Error(`Unsupported statement type: ${statement.type}`);\n    }\n  }\n  visitVariableDeclaration(declaration) {\n    const value = this.evaluateExpression(declaration.value);\n    this.symbolTable.set(declaration.name.name, value);\n  }\n  visitPrintStatement(printStatement) {\n    const value = this.evaluateInterpolatedString(printStatement.value);\n    this.output += value + '\\n';\n  }\n  visitExpressionStatement(expressionStatement) {\n    this.evaluateExpression(expressionStatement.expression);\n  }\n  evaluateInterpolatedString(interpolatedString) {\n    return interpolatedString.parts.map(part => {\n      if (part.type === 'TextPart') {\n        return part.text;\n      } else if (part.type === 'InterpolatedExpression') {\n        return this.evaluateExpression(part.expression);\n      }\n    }).join('');\n  }\n  evaluateExpression(expression) {\n    console.log('Evaluating expression:', expression);\n    switch (expression.type) {\n      case 'StringLiteral':\n        return expression.value;\n      case 'NumberLiteral':\n        return expression.value.toString();\n      case 'Identifier':\n        if (this.symbolTable.has(expression.name)) {\n          return this.symbolTable.get(expression.name);\n        }\n        throw new Error(`Undefined variable: ${expression.name}`);\n      default:\n        throw new Error(`Unsupported expression type: ${expression.type}`);\n    }\n  }\n}","map":{"version":3,"names":["VerseInterpreter","constructor","output","symbolTable","Map","interpret","ast","console","log","JSON","stringify","Array","isArray","body","Error","visitProgram","program","statement","visitStatement","type","visitVariableDeclaration","visitPrintStatement","visitExpressionStatement","declaration","value","evaluateExpression","set","name","printStatement","evaluateInterpolatedString","expressionStatement","expression","interpolatedString","parts","map","part","text","join","toString","has","get"],"sources":["/Users/johanfortus/Documents/Projects/Verse Playground/src/verse-interpreter.js"],"sourcesContent":["export class VerseInterpreter {\n    constructor() {\n        this.output = '';\n        this.symbolTable = new Map();\n      }\n    \n      interpret(ast) {\n        this.output = '';\n        console.log('Interpreter received AST:', JSON.stringify(ast, null, 2));\n        \n        if (!ast || typeof ast !== 'object' || !Array.isArray(ast.body)) {\n          throw new Error('Invalid AST structure: Expected an object with a body array');\n        }\n        \n        this.visitProgram(ast);\n        return this.output;\n      }\n    \n      visitProgram(program) {\n        for (const statement of program.body) {\n          this.visitStatement(statement);\n        }\n      }\n    \n      visitStatement(statement) {\n        if (!statement || typeof statement !== 'object' || !statement.type) {\n          throw new Error(`Invalid statement: ${JSON.stringify(statement)}`);\n        }\n    \n        console.log('Visiting statement:', statement);\n        switch (statement.type) {\n          case 'VariableDeclaration':\n            this.visitVariableDeclaration(statement);\n            break;\n          case 'PrintStatement':\n            this.visitPrintStatement(statement);\n            break;\n          case 'ExpressionStatement':\n            this.visitExpressionStatement(statement);\n            break;\n          default:\n            throw new Error(`Unsupported statement type: ${statement.type}`);\n        }\n      }\n  \n    visitVariableDeclaration(declaration) {\n      const value = this.evaluateExpression(declaration.value);\n      this.symbolTable.set(declaration.name.name, value);\n    }\n  \n    visitPrintStatement(printStatement) {\n      const value = this.evaluateInterpolatedString(printStatement.value);\n      this.output += value + '\\n';\n    }\n  \n    visitExpressionStatement(expressionStatement) {\n      this.evaluateExpression(expressionStatement.expression);\n    }\n  \n    evaluateInterpolatedString(interpolatedString) {\n      return interpolatedString.parts.map(part => {\n        if (part.type === 'TextPart') {\n          return part.text;\n        } else if (part.type === 'InterpolatedExpression') {\n          return this.evaluateExpression(part.expression);\n        }\n      }).join('');\n    }\n  \n    evaluateExpression(expression) {\n      console.log('Evaluating expression:', expression);\n      switch (expression.type) {\n        case 'StringLiteral':\n          return expression.value;\n        case 'NumberLiteral':\n          return expression.value.toString();\n        case 'Identifier':\n          if (this.symbolTable.has(expression.name)) {\n            return this.symbolTable.get(expression.name);\n          }\n          throw new Error(`Undefined variable: ${expression.name}`);\n        default:\n          throw new Error(`Unsupported expression type: ${expression.type}`);\n      }\n    }\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}